import React, { useState, useEffect } from 'react';

const WEATHER_API_KEY = process.env.REACT_APP_WEATHER_API_KEY;
const WEATHER_API_URL = `http://api.weatherstack.com/current?access_key=${WEATHER_API_KEY}&query=`;

function App() {
  return (
    <div>
      <AlarmClock />
    </div>
  );
}

const AlarmClock = () => {
  const [alarmTime, setAlarmTime] = useState('');
  const [isRinging, setIsRinging] = useState(false);
  const [alarmScheduled, setAlarmScheduled] = useState(null);
  const [alarmSound, setAlarmSound] = useState(null);
  const [weatherData, setWeatherData] = useState(null);
  const [dateTime, setDateTime] = useState({});
  const [message, setMessage] = useState('');

  const handleSetAlarm = () => {
    if (alarmTime) {
      setAlarmScheduled(alarmTime);
      setMessage(`Alarm set for ${alarmTime}`);
    } else {
      setMessage('Please set a valid time.');
    }
  };

  const formatTime = (date) => {
    return date.toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' });
  };

  useEffect(() => {
    // Fetch weather data using geolocation
    const fetchWeather = async (latitude, longitude) => {
      const response = await fetch(`${WEATHER_API_URL}${latitude},${longitude}`);
      const data = await response.json();
      setWeatherData(data.current);
    };

    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const latitude = position.coords.latitude;
          const longitude = position.coords.longitude;
          fetchWeather(latitude, longitude);
        },
        (error) => {
          console.error("Error fetching geolocation: ", error);
        }
      );
    }
  }, []);

  useEffect(() => {
    // Fetch date and time
    const updateDateTime = () => {
      const now = new Date();
      const time = now.toLocaleTimeString();
      const date = now.toLocaleDateString();
      const day = now.toLocaleDateString('en-US', { weekday: 'long' });

      setDateTime({ time, date, day });
    };

    updateDateTime();
    const interval = setInterval(updateDateTime, 1000);

    return () => clearInterval(interval); // Cleanup on component unmount
  }, []);

  useEffect(() => {
    // Check if it's time to ring the alarm
    const checkAlarm = () => {
      const now = new Date();
      const currentTime = formatTime(now); // Format current time to 'HH:MM'

      if (alarmScheduled === currentTime) {
        setIsRinging(true);
        setMessage('Alarm is ringing! Answer the questions to stop.');
        if (!alarmSound) {
          const sound = new Audio('/statics/iphone_alarm.mp3');
          sound.loop = true; // Make the sound loop
          sound.play();
          setAlarmSound(sound);
        }
      }
    };

    const interval = setInterval(checkAlarm, 1000);
    return () => clearInterval(interval);
  }, [alarmScheduled, alarmSound]);

  const stopAlarm = () => {
    if (alarmSound) {
      alarmSound.pause(); // Stop the sound
      setAlarmSound(null); // Reset the alarm sound
      setIsRinging(false); // Reset ringing state
      setAlarmScheduled(null); // Reset the alarm time
      setAlarmTime(''); // Reset the input field
      setMessage('Alarm stopped. You can set a new alarm.');
    }
  };

  return (
    <div>
      {!isRinging && (
        <>
          <h1>Set Alarm</h1>
          <input
            type="time"
            value={alarmTime}
            onChange={(e) => setAlarmTime(e.target.value)}
          />
          <button onClick={handleSetAlarm}>Set Alarm</button>
          {message && <p>{message}</p>}

          {alarmScheduled && <p>Alarm scheduled for: {alarmScheduled}</p>}
        </>
      )}

      {isRinging && (
        <QuestionSection 
          stopAlarm={stopAlarm} 
          weatherData={weatherData} 
          dateTime={dateTime} 
        />
      )}
    </div>
  );
};

const QuestionSection = ({ stopAlarm, weatherData, dateTime }) => {
  const [userAnswers, setUserAnswers] = useState({ temperature: '', day: '' });
  const [message, setMessage] = useState('');

  const handleSubmit = () => {
    const correctTemp = weatherData && weatherData.temperature;
    const correctDay = dateTime.day;

    if (parseInt(userAnswers.temperature) === correctTemp && userAnswers.day === correctDay) {
      setMessage('Correct! The alarm is stopped.');
      stopAlarm(); // Call stopAlarm function to stop the alarm sound
    } else {
      setMessage('Incorrect! Try again.');
    }
  };

  return (
    <>
      <div>
        <h1>Answer the following to stop the alarm</h1>

        {/* Display the weather and date data to the user */}
        <div>
          <h2>Weather Information</h2>
          {weatherData ? (
            <div>
              <p>Temperature: {weatherData.temperature}°C</p>
              <p>Feels Like: {weatherData.feelslike}°C</p>
              <p>Weather: {weatherData.weather_descriptions[0]}</p>
            </div>
          ) : (
            <p>Loading weather data...</p>
          )}
        </div>

        <div>
          <h2>Date & Time Information</h2>
          {dateTime ? (
            <div>
              <p>Time: {dateTime.time}</p>
              <p>Date: {dateTime.date}</p>
              <p>Day: {dateTime.day}</p>
            </div>
          ) : (
            <p>Loading date and time...</p>
          )}
        </div>

        {/* Input fields for the user to answer the questions */}
        <div>
          <h3>What's today's temperature?</h3>
          <input
            type="number"
            onChange={(e) => setUserAnswers({ ...userAnswers, temperature: e.target.value })}
          />
        </div>

        <div>
          <h3>What day is it?</h3>
          <input
            type="text"
            onChange={(e) => setUserAnswers({ ...userAnswers, day: e.target.value })}
          />
        </div>

        <button onClick={handleSubmit}>Submit Answers</button>
        {message && <p>{message}</p>}
      </div>
    </>
  );
};

export default App;
